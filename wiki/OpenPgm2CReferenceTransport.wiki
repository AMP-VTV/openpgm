#summary OpenPGM 2 : C Reference : Transport
#labels Phase-Implementation
#sidebar TOC2CReference

=== Introduction ===
Transports manage network connections and send outbound messages.

=== Topics in Alphabetical Order ===
<table border="1" cellpadding="5" cellspacing="0">
<tr>
<th>Function or Type</th>
<th>Description</th>
</tr>
<tr>
<td colspan="2"><h3>GSI API</h3></td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmGsiT pgm_gsi_t]</tt></td>
<td>Object representing a GSI.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmGsiCreateFromAddr pgm_gsi_create_from_addr()]</tt></td>
<td>Create a GSI based on IPv4 host address.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmGsiCreateFromHostname pgm_gsi_create_from_hostname()]</tt></td>
<td>Create a GSI based on MD5 of system host name.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmGsiPrint pgm_gsi_print()]</tt></td>
<td>Display a GSI in human friendly form.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmGsiPrint pgm_gsi_print_r()]</tt></td>
<td>Display a GSI in human friendly form, re-entrant form.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmGsiEqual pgm_gsi_equal()]</tt></td>
<td>Compare two GSI values.</td>
</tr><tr>
<td colspan="2"><h3>TSI API</h3></td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTsiT pgm_tsi_t]</tt></td>
<td>Object representing a TSI.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTsiPrint pgm_tsi_print()]</tt></td>
<td>Display a TSI in human friendly form.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTsiPrint pgm_tsi_print_r()]</tt></td>
<td>Display a TSI in human friendly form, re-entrant version.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTsiEqual pgm_tsi_equal()]</tt></td>
<td>Compare two TSI values.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTsiEqual pgm_tsi_hash()]</tt></td>
<td>Generate a TSI hash value.</td>
</tr><tr>
<td colspan="2"><h3>Transport API</h3></td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmIoStatus PGMIOStatus]</tt></td>
<td>Return status for PGM IO functions.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmIoVec pgm_iovec]</tt></td>
<td>A scatter/gather message vector.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmMsgvT pgm_msgv_t]</tt></td>
<td>A scatter/gather message vector^2^.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportT pgm_transport_t]</tt></td>
<td>A transport object represents a delivery mechanism for messages.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmRecv pgm_recv()]</tt></td>
<td>Receive a message from the transport.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmRecv pgm_recvfrom()]</tt></td>
<td>Receive a message from the transport saving source TSI.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmRecv pgm_recvmsg()]</tt></td>
<td>Receive a message from the transport with scatter/gather vector buffers.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmRecvMsgv pgm_recvmsgv()]</tt></td>
<td>Receive a message vector from the transport with scatter/gather vector buffers.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmSend pgm_send()]</tt></td>
<td>Send a message.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmSendv pgm_sendv()]</tt></td>
<td>Send a vector of messages.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmSendSkbv pgm_send_skbv()]</tt></td>
<td>Zero-copy send a vector of PGM skbuffs.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportBind pgm_transport_bind()]</tt></td>
<td>Bind a transport to the specified network devices.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportCreate pgm_transport_create()]</tt></td>
<td>Create a network transport.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportDestroy pgm_transport_destroy()]</tt></td>
<td>Destroy a transport.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportGetRateRemaining pgm_transport_get_rate_remaining()]</tt></td>
<td>Get remaining time slice of the send rate limit engine.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSelectInfo pgm_transport_select_info()]</tt></td>
<td>Set parameters suitable for feeding into <tt>select()</tt>.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportPollInfo pgm_transport_poll_info()]</tt></td>
<td>Set parameters suitable for feeding into <tt>poll()</tt>.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportEpollCtl pgm_transport_epoll_ctl()]</tt></td>
<td>Fill <tt>epoll_event</tt> parameters in preparation for <tt>epoll_wait()</tt>.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportMaxTsdu pgm_transport_max_tsdu()]</tt></td>
<td>Get maximum TSDU, or packet payload size with or without fragmentation.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetAmbientSpm pgm_transport_set_ambient_spm()]</tt></td>
<td>Set interval of background SPM packets.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetHeartbeatSpm pgm_transport_set_heartbeat_spm()]</tt></td>
<td>Set intervals of data flushing SPM packets.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetAbortOnReset pgm_transport_set_abort_on_reset()]</tt></td>
<td>Close transport after detecting unrecoverable data loss.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetFec pgm_transport_set_fec()]</tt></td>
<td>Set and enable Forward Error Correction parameters.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetHops pgm_transport_set_hops()]</tt></td>
<td>Set maximum number of network hops to cross.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetMaxTpdu pgm_transport_set_max_tpdu()]</tt></td>
<td>Set maximum transport data unit size.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetMulticastLoop pgm_transport_set_multicast_loop()]</tt></td>
<td>Set multicast loop and socket address sharing.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetNonBlocking pgm_transport_set_nonblocking()]</tt></td>
<td>Set non-blocking send and receive transport.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetNakDataRetries pgm_transport_set_nak_data_retries()]</tt></td>
<td>Set retries for DATA packets after NAK.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetNakNcfRetries pgm_transport_set_nak_ncf_retries()]</tt></td>
<td>Set retries for DATA after NCF.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetNakBoIvl pgm_transport_set_nak_bo_ivl()]</tt></td>
<td>Set NAK transmit back-off interval.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetNakRdataIvl pgm_transport_set_nak_rdata_ivl()]</tt></td>
<td>Set timeout for receiving RDATA.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetNakRptIvl pgm_transport_set_nak_rpt_ivl()]</tt></td>
<td>Set timeout before repeating NAK.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetPeerExpiry pgm_transport_set_peer_expiry()]</tt></td>
<td>Set timeout for removing a dead peer.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetRcvBuf pgm_transport_set_rcvbuf()]</tt></td>
<td>Set receive buffer size.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetRxwMaxRte pgm_transport_set_rxw_max_rte()]</tt></td>
<td>Set receive window size by data rate.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetRxwSecs pgm_transport_set_rxw_secs()]</tt></td>
<td>Set receive window size in seconds.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetRxwSqns pgm_transport_set_rxw_sqns()]</tt></td>
<td>Set receive window size in sequence numbers.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetRecvOnly pgm_transport_set_recv_only()]</tt></td>
<td>Set transport to receive-only mode, data packets will not be published.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetSendOnly pgm_transport_set_send_only()]</tt></td>
<td>Set transport to send-only mode, data packets will not be read.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetSndBuf pgm_transport_set_sndbuf()]</tt></td>
<td>Set send buffer size.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetSpmrExpiry pgm_transport_set_spmr_expiry()]</tt></td>
<td>Set expiration time of SPM Requests.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetTxwMaxRte pgm_transport_set_txw_max_rte()]</tt></td>
<td>Set send window size by data rate.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetTxwSecs pgm_transport_set_txw_secs()]</tt></td>
<td>Set send window size in seconds.</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportSetTxwSqns pgm_transport_set_txw_sqns()]</tt></td>
<td>Set send window size in sequence numbers.</td>
</tr><tr>
<td colspan="2"><h3>Source Specific Multicast API</h3></td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportJoinGroup pgm_transport_join_group()]</tt></td>
<td>Join a multicast group (ASM).</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportJoinGroup pgm_transport_leave_group()]</tt></td>
<td>Leave a multicast group (ASM).</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportBlockSource pgm_transport_block_source()]</tt></td>
<td>Block packets from a specific source IP address (ASM).</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportBlockSource pgm_transport_unblock_source()]</tt></td>
<td>Re-allow packets from a specific source IP address (ASM).</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportJoinSourceGroup pgm_transport_join_source_group()]</tt></td>
<td>Join a multicast group sent by a specific source IP address (SSM).</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportJoinSourceGroup pgm_transport_leave_source_group()]</tt></td>
<td>Leave a multicast group sent by a specific source IP address (SSM).</td>
</tr><tr>
<td><tt>[OpenPgm2CReferencePgmTransportMsFilter pgm_transport_msfilter()]</tt></td>
<td>Block or re-allow packets from a list of source IP addresses.</td>
</tr>
</table>

