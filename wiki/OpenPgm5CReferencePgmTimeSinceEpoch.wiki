#summary OpenPGM 5 : C Reference : Timing : pgm_time_since_epoch()
#labels Phase-Implementation
#sidebar TOC5CReferenceTiming
_Function_
=== Declaration ===
<pre>
#include <time.h>
#include <pgm/pgm.h>

void *pgm_time_since_epoch* (
	const [OpenPgm5CReferencePgmTimeT pgm_time_t]`*`    pgm_time_t_time,
	time_t`*`    time_t_time
	);
</pre>

=== Purpose ===
Convert <tt>[OpenPgm5CReferencePgmTimeT pgm_time_t]</tt> to <tt>time_t</tt> scoped time.

=== Remarks ===
Some timing sources use a counter based from the core or timing device boot time, other timing
 sources use a counting frequency different to the resolution provided by <tt>[OpenPgm5CReferencePgmTimeT pgm_time_t]</tt>.  Calling <tt>pgm_time_since_epoch()</tt> will scale the timing source to microseconds and use an offset calculated at timer module startup.

=== Parameters ===

<table border="1" cellpadding="5" cellspacing="0">
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
<tr>
<td><tt>pgm_time_t_time</tt></td>
<td>OpenPGM scaled and offset time</td>
</tr><tr>
<td><tt>time_t_time</tt></td>
<td>POSIX.1 scaled and offset time, seconds since the Epoch (1970, January 1).</td>
</tr>
</table>


=== Example ===
Display absolute local time.

{{{
 pgm_time_t a_time;
 time_t epoch_time;
 struct tm local_time;
 char outstr[1024];
 pgm_time_since_epoch (&a_time, &epoch_time);
 localtime_r (&epoch_time, &local_time);
 strftime (outstr, sizeof(outstr), "%T", &local_time);
 printf ("a_time is %s\n", outstr);
}}}

=== See Also ===
  * <tt>[OpenPgm5CReferencePgmTimeT pgm_time_t]</tt><br>
  * [OpenPgm5CReferenceTiming Timing] in OpenPGM C Reference.
