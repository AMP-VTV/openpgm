#summary OpenPGM 5 : C Reference : Socket : pgm_connect()
#labels Phase-Implementation
#sidebar TOC5CReferenceSocket
_Function_
=== Declaration ===
<pre>
#include <pgm/pgm.h>

bool *pgm_connect* (
	[OpenPgm5CReferencePgmSockT pgm_sock_t]`*` const    sock,
	[OpenPgm5CReferencePgmErrorT pgm_error_t]`*``*`        error
	);
</pre>

=== Purpose ===
Initiate a PGM socket connection.

=== Parameters ===

<table border="1" cellpadding="5" cellspacing="0">
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
<tr>
<td><tt>sock</tt></td>
<td>The PGM socket object.</td>
</tr><tr>
<td><tt>error</tt></td>
<td>a return location for a [OpenPgm5CReferencePgmErrorT pgm_error_t], or <tt>NULL</tt>.</td>
</tr>
</table>

=== Return Value ===
On success, <tt>true</tt> is returned.  On failure, <tt>false</tt> is returned and if <tt>error</tt> is set it may be populated with details of the exception.


=== Errors ===
The following are general socket errors only. There may be other platform-specific error codes.

*PGM_ERROR_DOMAIN_SOCKET,*
  * _"Sending SPM broadcast: %s"_
    * Platform specific error during socket send call.


=== Example ===
{{{
pgm_sock_t *sock = NULL;
pgm_error_t *err = NULL;
if (!pgm_connect (sock, &err)) {
  fprintf (stderr, "Connecting PGM socket: %s\n",
           (err && err->message) ? err->message : "(null)");
  pgm_error_free (err);
  return EXIT_FAILURE;
}
}}}


=== See Also ===
  * <tt>[OpenPgm5CReferencePgmSockT pgm_sock_t]</tt><br>
  * <tt>[OpenPgm5CReferencePgmSocket pgm_socket()]</tt><br>
  * <tt>[OpenPgm5CReferencePgmBind pgm_bind()]</tt><br>
  * <tt>[OpenPgm5CReferencePgmClose pgm_close()]</tt><br>
  * [OpenPgm5CReferenceErrorHandling Error Handling] in OpenPGM C Reference.<br>
  * [OpenPgm5CReferenceSocket Socket] in OpenPGM C Reference.