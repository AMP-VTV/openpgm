#summary OpenPGM 2 : C Reference : pgm_async_add_watch()
#labels Phase-Implementation
#sidebar TOC2CReference

_Function_
=== Declaration ===
<pre>
#include <pgm/pgm.h>

int *pgm_async_add_watch* (
	[OpenPgm2CReferencePgmAsyncT pgm_async_t]`*`    async,
	[OpenPgm2CReferencePgmEventFnT pgm_eventfn_t]      fcuntion,
	[http://library.gnome.org/devel/glib/stable/glib-Basic-Types.html#gpointer gpointer]      user_data
);

int *pgm_async_add_watch_full* (
	[OpenPgm2CReferencePgmAsyncT pgm_async_t]`*`    async,
	[http://library.gnome.org/devel/glib/stable/glib-Basic-Types.html#gint gint]      priority,
	[OpenPgm2CReferencePgmEventFnT pgm_eventfn_t]      fcuntion,
	[http://library.gnome.org/devel/glib/stable/glib-Basic-Types.html#gpointer gpointer]      user_data,
	[http://library.gnome.org/devel/glib/stable/glib-Datasets.html#GDestroyNotify GDestroyNotify]      notify
);
</pre>

=== Purpose ===
Add a transport event listener.

=== Remarks ===
Event management is handled by the GLib general-purpose utility library, <tt>pgm_transport_add_watch()</tt> creates an event listener in the current context for the specified transport.

=== Parameters ===

<table border="1" cellpadding="5" cellspacing="0">
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
<tr>
<td><tt>async</tt></td>
<td>The asynchronous receiver object.</td>
</tr><tr>
<td><tt>priority</tt></td>
<td>The priority of the listen source.  Typically this will be in the range between [http://library.gnome.org/devel/glib/stable/glib-The-Main-Event-Loop.html#G-PRIORITY-DEFAULT:CAPS G_PRIORITY_DEFAULT] and [http://library.gnome.org/devel/glib/stable/glib-The-Main-Event-Loop.html#G-PRIORITY-HIGH:CAPS G_PRIORITY_HIGH].</td>
</tr><tr>
<td><tt>function</tt></td>
td>Function to call on receiving an event.</td>
</tr><tr>
<td><tt>user_data</tt></td>
<td>Data to pass to <tt>function</tt></td>
</tr><tr>
<td><tt>notify</tt></td>
<td>Function to call when the listener is destroyed.</td>
</tr>
</table>


=== Return Value ===
On success, the ID (greater than 0) of the event source.  On invalid arguments, <tt>-EINVAL</tt> is returned.

=== Example ===

{{{
 int
 on_data (
     gpointer data,
     guint len,
     gpointer user_data)
 {
   char buf[1024];
   snprintf (buf, sizeof(buf), "%s", (char*)data);
   g_message ("\"%s\" (%i bytes)", buf, len);
   return 0;
 }
 
 pgm_async_t* async;
 pgm_async_create (&async, transport, 0);
 pgm_async_add_watch (async, on_data, NULL);
}}}

=== See Also ===
  * <tt>[OpenPgm2CReferencePgmEventFnT pgm_eventfn_t]</tt><br>
  * <tt>[OpenPgm2CReferencePgmAsyncT pgm_async_t]</tt><br>
  * <tt>[OpenPgm2CReferencePgmTransportT pgm_transport_t]</tt><br>
  * <tt>[OpenPgm2CReferencePgmAsyncCreate pgm_async_create()]</tt><br>
  * <tt>[OpenPgm2CReferencePgmAsyncDestroy pgm_async_destroy()]</tt><br>
  * [OpenPgm2CReferenceAsynchronousReceiver Asynchronous Receiver] in OpenPGM C Reference.
