#summary OpenPGM 2 : C Reference : pgm_send_skbv()
#labels Phase-Implementation

_Function_
=== Declaration ===
<pre>
#include <pgm/pgm.h>

[OpenPgm2CReferencePgmIoStatus PGMIOStatus] *pgm_send_skbv* (
	[OpenPgm2CReferencePgmTransportT pgm_transport_t]`*` const           transport,
	const struct [OpenPgm2CReferencePgmSkBuffT pgm_sk_buff_t]`*``*`     vector,
	[http://library.gnome.org/devel/glib/stable/glib-Basic-Types.html#guint guint]                            count,
	[http://library.gnome.org/devel/glib/stable/glib-Basic-Types.html#gboolean gboolean]                         is_one_apdu,
	[http://library.gnome.org/devel/glib/stable/glib-Basic-Types.html#gsize gsize]`*`                           bytes_written
	);
</pre>

=== Purpose ===
Send a vector of transmit window buffers as one Application Protocol Data Unit (APDU), or a vector of APDUs to the network.

=== Remarks ===
Network delivery of APDUs can be interspersed with ambient SPM and RDATA packets as necessary.  Vector element PGM SKBs must be retrieved from the transmit window via <tt>[OpenPgm2CReferencePgmAllocSkb pgm_alloc_skb()].</tt>

Calling with non-blocking transport set will return with <tt>PGM_IO_STATUS_AGAIN</tt> or <tt>PGM_IO_STATUS_AVAIN2</tt>. on any TPDU in the APDU failing to be immediately delivered.  The next call to <tt>pgm_sendv()</tt> MUST be with exactly the same parameters until transmission is complete.

=== Parameters ===

<table border="1" cellpadding="5" cellspacing="0">
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
<tr>
<td><tt>transport</tt></td>
<td>The PGM transport object.</td>
</tr><tr>
<td><tt>vector</tt></td>
<td>Scatter/gather IO vector of data buffers.</td>
</tr><tr>
<td><tt>count</tt></td>
<td>Elements in <tt>vector</tt>.</td>
</tr><tr>
<td><tt>is_one_apdu</tt></td>
<td><tt>vector</tt> is one APDU if set <tt>TRUE</tt>, every element of <tt>vector</tt> is one APDU if set to <tt>FALSE</tt>.</td>
</tr><tr>
<td><tt>bytes_written</tt></td>
<td>Pointer to store count of bytes written from <tt>buf</tt>.</td>
</tr>
</table>

=== Return Value ===
On success, returns <tt>PGM_IO_STATUS_NORMAL</tt>, on error returns <tt>PGM_IO_STATUS_ERROR</tt>, on reset due to unrecoverable data loss, returns <tt>PGM_IO_STATUS_RESET</tt>.  If the transport is marked non-blocking then <tt>PGM_IO_STATUS_AGAIN</tt> is returned if the operation would block, if the block would be caused by the rate limiting engine then <tt>PGM_IO_STATUS_AGAIN2</tt> is returned instead.

=== Example ===
Send with non-blocking APDU with basic event detection.

{{{
 const char* buffer = "안녕하세요, 잘 지내 시죠?";
 struct pgm_sk_buff_t* vector[2];
 const int max_tpdu = 1500;
 const int header_size = pgm_transport_pkt_offset(TRUE);
 vector[0] = pgm_alloc_skb (max_tpdu);
 pgm_skb_reserve (vector[0], header_size);
 pgm_skb_put (vector[0], wcslen(buffer) / 2);
 memcpy (vector[0]->data, buffer, vector[0]->len);
 vector[1] = pgm_alloc_skb (max_tpdu);
 pgm_skb_reserve (vector[1], header_size);
 pgm_skb_put (vector[1], wcslen(buffer) - (wcslen(buffer) / 2);
 memcpy (vector[1]->data, buffer + vector[0]->len, vector[1]->len);
 for(;;) {
   gsize bytes_sent;
   PGMIOStatus status;
   status = pgm_send_skbv (transport, vector, G_N_ELEMENTS(vector), TRUE, &bytes_sent);
   if (PGM_IO_STATUS_AGAIN == status) {
     int n_fds = 3;
     struct pollfd fds[ n_fds ];
     memset (fds, 0, sizeof(fds));
     pgm_transport_poll_info (transport, fds, &n_fds, POLLIN);
     poll (fds, n_fds, -1 /* timeout=∞ */);
   } else if (PGM_IO_STATUS_AGAIN2 == status) {
     struct timeval tv;
     int timeout;
     pgm_transport_get_rate_remaining (transport, &tv);
     timeout = (tv.tv_sec * 1000) + ((tv.tv_usec + 500) / 1000);
     usleep (timeout);
   } else {
     break;
   }
   g_message ("sent %" G_GSIZE_FORMAT " bytes.", bytes_sent);
 }
}}}

=== See Also ===
  * <tt>[OpenPgm2CReferencePgmTransportT pgm_transport_t]</tt><br>
  * <tt>[OpenPgm2CReferencePgmAllocSkb pgm_alloc_skb()]</tt><br>
  * <tt>[OpenPgm2CReferencePgmSend pgm_send()]</tt><br>
  * <tt>[OpenPgm2CReferencePgmSendv pgm_sendv()]</tt><br>
  * <tt>[OpenPgm2CReferencePgmSendSkbv pgm_send_skbv()]</tt><br>
  * [OpenPgm2CReferencePgmSkbs PGM SKBs] in OpenPGM C Reference.<br>
  * [OpenPgm2CReferenceTransport Transport] in OpenPGM C Reference.
