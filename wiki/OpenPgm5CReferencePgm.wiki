#summary OpenPGM 5 : C Reference : Socket : PGM(7)
#labels Phase-Implementation
#sidebar TOC5CReferenceSocket
_Type_
=== Declaration ===
<pre>
#include <pgm/pgm.h>

int retval = pgm_socket(pgm_socket, AF_INET, SOCK_SEQPACKET, IPPROTO_PGM, NULL);
int retval = pgm_socket(udp_socket, AF_INET, SOCK_SEQPACKET, IPPROTO_UDP, NULL);
</pre>

=== Purpose ===
PGM protocol implementation.

=== Description ===
OpenPGM implements the PGM protocol described in RFC 3208.

The programming interface is similar to BSD-sockets.

A PGM socket is created by calling the <tt>[OpenPgm5CReferencePgmSocket pgm_socket()]</tt> function as <tt>pgm_socket(pgm_socket, AF_INET, SOCK_SEQPACKET, protocol, NULL)</tt>.  The only valid values for _protocol_ are <tt>IPPROTO_PGM</tt> for PGM/IP sockets, and <tt>IPPROTO_UDP</tt> for PGM/UDP sockets.

In the common case the PGM protocol is bi-directional, in preparation for receiving new incoming packets it should bind a socket to a local interface address using <tt>[OpenPgm5CReferencePgmBind pgm_bind()]</tt>.  Only one PGM socket should be bound to any given local (address, port) pair.  When <tt>INADDR_ANY</tt> is specified in the bind call, the socket will be bound as per the local multicast routing rules.  <tt>[OpenPgm5CReferencePgmConnect pgm_connect()]</tt> may not be called on an unbound socket, the process must define all PGM protocol parameters, there is no automatic configuration.

Care should be taken when closing and re-opening PGM sockets with the same local (address, port) pair as it makes PGM less reliable.


=== Address Format ===
A PGM endpoint address is defined as a combination of a 16-bit data-destination port number and a PGM Transport Session Identifier.

<pre>
struct pgm_sockaddr_t {
	uint16_t      sa_port;    /`*` data-destination port `*`/
	[OpenPgm5CReferencePgmTsiT pgm_tsi_t]     sa_addr;
	};

/`*` Transport Session Identifier `*`/
struct pgm_tsi_t {
	[OpenPgm5CReferencePgmGsiT pgm_gsi_t]     gsi;
	uint16_t      sport;      /`*` data-source port `*`/
	};

/`*` Global Source Identifier `*`/
struct pgm_gsi_t {
	char identifier`[`6`]`;
};
</pre>

_sa_port_ contains the globally well-known port number assigned to the given PGM application in host byte order.

_sa_addr_ is the globally unique transport session identifier.  The _gsi_ member of <tt>[OpenPgm5CReferencePgmTsiT pgm_tsi_t]</tt> is a globally unique source identifier in network byte order.  _identifier_ may be set using the <tt>[OpenPgm5CReferencePgmGsiCreateFromHostname pgm_gsi_create_from_hostname()]</tt>, <tt>[OpenPgm5CReferencePgmGsiCreateFromAddr pgm_gsi_create_from_addr()]</tt>, <tt>[OpenPgm5CReferencePgmGsiCreateFromString pgm_gsi_create_from_string()]</tt>, <tt>[OpenPgm5CReferencePgmGsiCreateFromData pgm_gsi_create_from_data()]</tt> library functions.  _sport_ should be a random port number generated by the process, this port number must be unique within the source.

Note that ports are always stored in host byte order and identifiers in network byte order.


=== Socket Options ===
PGM supports some protocol-specific socket options that can be set with <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt> and read with <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.  The socket option level for PGM is <tt>IPPROTO_PGM</tt>.  A boolean integer flag is zero when it is false, otherwise true.
<dl>
<dt><tt>PGM_ABORT_ON_RESET</tt></dt>
<dd>When this flag is set, close transport after detecting unrecoverable data loss.</dd>
<dt><tt>PGM_ACK_SOCK</tt></dt>
<dd>Retrieve the ACK notification socket.  Only valid when PGMCC has been enabled.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dt><tt>PGM_AMBIENT_SPM</tt></dt>
<dd>Set or read the interval (in microseconds) of background SPM packets.</dd>
<dt><tt>PGM_BLOCK_SOURCE</tt></dt>
<dd>Block a specific multicast source.  Argument is a <tt>group_source_req</tt> structure.
<pre>
struct group_source_req {
    uint32_t                gsr_interface; /`*` interface index `*`/
    struct sockaddr_storage gsr_group;     /`*` group address `*`/
    struct sockaddr_storage gsr_source;    /`*` source address `*`/
};
</pre>
<p>_gsr_interface_ is the interface index of the interface that should join/leave the _gsr_group_ group, or 0 to indicate any interface.  _gsr_source_ must be the same address family (IPv6 or IPv4) as the address specified in the _gsr_group_ member.</p>
<p>Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</p></dd>
<dt><tt>PGM_HEARTBEAT_SPM</tt></dt>
<dd>Set or read intervals (in microseconds) of data flushing SPM packets.  The arguments are a pointer to an array of integer intervals and the length of the array.</dd>
<dt><tt>PGM_IP_ROUTER_ALERT</tt></dt>
<dd>Pass all PGM network significant packets with the IP Router Alert option set.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</dd>
<dt><tt>PGM_JOIN_GROUP</tt></dt>
<dd>Join a multicast group.  Argument is a <tt>group_req</tt> structure.
<pre>
struct group_req {
    uint_32_t               gr_interface; /`*` interface index `*`/
    struct sockaddr_storage gr_group;     /`*` group address `*`/
};
</pre>
<p>_gr_interface_ is the interface index of the interface that should join/leave the _gr_group_ group, or 0 to indicate any interface.</p>
<p>Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</p></dd>
<dt><tt>PGM_JOIN_SOURCE_GROUP</tt></dt>
<dd>Join a multicast group from a given source.  Argument is a <tt>group_source_req</tt> structure similar to <tt>PGM_BLOCK_SOURCE</tt>.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</dd>
<dt><tt>PGM_LEAVE_GROUP</tt></dt>
<dd>Leave a multicast group.  Argument is a <tt>group_req</tt> structure similar to <tt>PGM_JOIN_GROUP</tt>.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</dd>
<dt><tt>PGM_LEAVE_SOURCE_GROUP</tt></dt>
<dd>Leave a multicast group/source pair.  Argument is a <tt>group_source_req</tt> structure similar to <tt>PGM_BLOCK_SOURCE</tt>.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</dd>
<dt><tt>PGM_MSFILTER</tt></dt>
<dd>Set multicast filtering with a list of sources to include or exclude.  Argument is a <tt>group_filter</tt> structure.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.
<pre>
#define MCAST_EXCLUDE   0
#define MCAST_INCLUDE   1

struct group_filter {
    uint32_t                gf_interface; /`*` interface index `*`/
    struct sockaddr_storage gf_group;     /`*` multicast address `*`/
    uint32_t                gf_fmode;     /`*` filter mode `*`/
    uint32_t                gf_numsrc;    /`*` number of sources `*`/
    struct sockaddr_storage gf_slist`[`1`]`;  /`*` source addresses `*`/
};
</pre></dd>
<dt><tt>PGM_MSS</tt></dt>
<dd>Returns the maximum segment size for a fragmented APDU.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dt><tt>PGM_MSSS</tt></dt>
<dd>Returns the maximum segment size for an unfragmented APDU.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dt><tt>PGM_MTU</tt></dt>
<dd>Set or read the maximum transmission packet size.</dd>
<dt><tt>PGM_MULTICAST_HOPS</tt></dt>
<dd>Sets the time-to-live field in every multicast packet sent from this transport.  The default is 1 which means that the multicast packets don't leave the local network.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</dd>
<dt><tt>PGM_MULTICAST_LOOP</tt></dt>
<dd>Set a boolean integer argument that determines whether sent PGM packets should be looped back to the local sockets.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</dd>
<dt><tt>PGM_NAK_BO_IVL</tt></dt>
<dd>Set or read <tt>NAK_BO_IVL</tt>, the NAK back-off interval (in microseconds), the maximum time period a receiver must wait before transmitting a NAK.</dd>
<dt><tt>PGM_NAK_DATA_RETRIES</tt></dt>
<dd>Set or read <tt>NAK_DATA_RETRIES</tt>, the maximum number of attempts waiting for incoming data from receipt of NCF.</dd>
<dt><tt>PGM_NAK_NCF_RETRIES</tt></dt>
<dd>Set or read <tt>NAK_NCF_RETRIES</tt>, the maximum number of retries waiting for a NAK confirmation.</dd>
<dt><tt>PGM_NAK_RDATA_IVL</tt></dt>
<dd>Set or read <tt>NAK_RDATA_IVL</tt>, the NAK suppression interval (in microseconds) after receipt of multicast NAK or NCF.</dd>
<dt><tt>PGM_NAK_RPT_IVL</tt></dt>
<dd>Set or read <tt>NAK_RPT_IVL</tt>, the interval (in microseconds) for suspending repeat NAK generation whilst waiting for corresponding NCFs.</dd>
<dt><tt>PGM_NOBLOCK</tt></dt>
<dd>Set or read a boolean integer argument that when not enabled PGM socket calls are blocked until the operation can complete.  If <tt>PGM_NOBLOCK</tt> is enabled then calls will fail with the error <tt>PGM_IO_STATUS_WOULD_BLOCK</tt>.</dd>
<dt><tt>PGM_ODATA_MAX_RTE</tt></dt>
<dd>Set or read <tt>ODATA_MAX_RTE</tt>, the maximum original-data (ODATA) packet bitrate for rate control.</dd>
<dt><tt>PGM_PASSIVE</tt></dt>
<dd>Set or read a boolean integer argument that determines whether to enable back channel communication from a PGM receiver to a PGM source.</dd>
<dt><tt>PGM_PDU</tt></dt>
<dd>Returns the maximum payload size for an APDU.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dt><tt>PGM_PEER_EXPIRY</tt></dt>
<dd>Set or read the interval (in microseconds) without receipt of a packet from a peer before marking it dead.</dd>
<dt><tt>PGM_PENDING_SOCK</tt></dt>
<dd>Retrieve the pending state notification socket.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dd></dd>
<dt><tt>PGM_RATE_REMAIN</tt></dt>
<dd>Read the remaining time period (in microseconds) that the socket is rate limited from transmission.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dt><tt>PGM_RDATA_MAX_RTE</tt></dt>
<dd>Set or read <tt>RDATA_MAX_RTE</tt>, the maximum repair-data (RDATA) packet bitrate for rate control.</dd>
<dt><tt>PGM_RECV_ONLY</tt></dt>
<dd>Set or read a boolean integer argument that when enabled disables the transmission channel on the PGM data-destination port.  Equivalent to <tt>socket (tcp_socket, SHUT_WR)</tt> causing future transmissions to be disallowed.</dd>
<dt><tt>PGM_RECV_SOCK</tt></dt>
<dd>Retrieve the underlying receive socket.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dd></dd>
<dt><tt>PGM_REPAIR_SOCK</tt></dt>
<dd>Retrieve the repair notification socket.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dd></dd>
<dt><tt>PGM_RXW_MAX_RTE</tt></dt>
<dd>Set or read <tt>RXW_MAX_RTE</tt>, the maximum receive bitrate, multiplied by RXW_SECS to calculate receive window size.</dd>
<dt><tt>PGM_RXW_SECS</tt></dt>
<dd>Set or read <tt>RXW_SECS</tt>, the size of the receive window in seconds.</dd>
<dt><tt>PGM_RXW_SQNS</tt></dt>
<dd>Set or read <tt>RXW_SQNS</tt>, the size of the receive window in sequences.</dd>
<dt><tt>PGM_SEND_GROUP</tt></dt>
<dd>Sets the send-side multicast group address.  Argument is a <tt>group_req</tt> structure similar to <tt>PGM_JOIN_GROUP</tt>.</dd>
<dt><tt>PGM_SEND_ONLY</tt></dt>
<dd>Set or read a boolean integer argument that when enabled disables the receive channel on the PGM data-destination port.  Equivalent to <tt>socket (tcp_socket, SHUT_RD)</tt>, further receptions of data will be disallowed.</dd>
<dt><tt>PGM_SEND_SOCK</tt></dt>
<dd>Retrieve the underlying send socket.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dt><tt>PGM_SPMR_EXPIRY</tt></dt>
<dd>Set or read the maximum SPM-Request back-off interval (in microseconds) during which a receiver listens for multicast of an identical SPMR before unicasting its own SPMR to the source.</dd>
<dt><tt>PGM_TIME_REMAIN</tt></dt>
<dd>Read the remaining time period (in microseconds) of the current state in the PGM state machine.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_getsockopt()]</tt>.</dd>
<dt><tt>PGM_TOS</tt></dt>
<dd>Set the Type-Of-Service (TOS) field that is sent with every IP packet originating from this socket.  Some high priority levels may require superuser privileges.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</dd>
<dt><tt>PGM_TXW_MAX_RTE</tt></dt>
<dd>Set or read <tt>TXW_MAX_RTE</tt>, the maximum transmit bitrate for rate control, when multiplied by <tt>TXW_SECS</tt> calculates the transmit window size.</dd>
<dt><tt>PGM_TXW_SECS</tt></dt>
<dd>Set or read <tt>TXW_SECS</tt>, the size of the transmit window in seconds.</dd>
<dt><tt>PGM_TXW_SQNS</tt></dt>
<dd>Set or read <tt>TXW_SQNS</tt>, the size of the transmit window in sequences.</dd>
<dt><tt>PGM_UDP_ENCAP_MCAST_PORT</tt></dt>
<dd>Set or read the UDP encapsulated multicast port.</dd>
<dt><tt>PGM_UDP_ENCAP_UCAST_PORT</tt></dt>
<dd>Set or read the UDP encapsulated unicast port.</dd>
<dt><tt>PGM_UNBLOCK_SOURCE</tt></dt>
<dd>Unblocks a blocked source.  Argument is a <tt>group_source_req</tt> structure as <tt>PGM_BLOCK_SOURCE</tt>.  Only valid as a <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.</dd>
<dt><tt>PGM_UNCONTROLLED_ODATA</tt></dt>
<dd>Set or read an integer argument indicating whether original-data (ODATA) packets should be rate limited.</dd>
<dt><tt>PGM_UNCONTROLLED_RDATA</tt></dt>
<dd>Set or read an integer argument indicating whether repair-data (RDATA) packets should be rate limited.</dd>
<dt><tt>PGM_USE_CR</tt></dt>
<dd>Set or read an integer argument that when enabled sends congestion reports from PGM receivers to congestion report-requesting PGM sources.</dd>
<dt><tt>PGM_USE_FEC</tt></dt>
<dd>Set or read Forward Error Correction parameters for PGM sources and receivers.  Argument is a <tt>pgm_fecinfo_t</tt> structure.
<pre>
struct pgm_fecinfo_t {
    uint8_t   block_size;
    uint8_t   proactive_packets;
    uint8_t   group_size;
    bool      ondemand_parity_enabled;
    bool      var_pktlen_enabled;
};
</pre>
</dd>
<dt><tt>PGM_USE_PGMCC</tt></dt>
<dd>Set or read PGM Congestion Control parameters for PGM sources and receivers.  Argument is a <tt>pgm_ccinfo_t</tt> structure.
<pre>
struct pgm_ccinfo_t {
    uint32_t  ack_bo_ivl;
    uint32_t  ack_c;
    uint32_t  ack_c_p;
};
</pre>
</dd>
</dl>

=== See Also ===
  * [http://tools.ietf.org/rfcmarkup?doc=3208 RFC 3208] for the original PGM specification.
