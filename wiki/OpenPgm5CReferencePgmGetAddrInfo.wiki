#summary OpenPGM 5 : C Reference : Interface : pgm_getaddrinfo()
#labels Phase-Implementation
#sidebar TOC5CReferenceInterface
_Function_
=== Declaration ===
<pre>
#include <pgm/pgm.h>

bool *pgm_getaddrinfo* (
	const char`*`                  restrict network,
	const struct [OpenPgm5CReferencePgmAddrInfoT pgm_addrinfo_t]`*` restrict hints,
	struct [OpenPgm5CReferencePgmAddrInfoT pgm_addrinfo_t]`*``*`      restrict res,
	[OpenPgm5CReferencePgmErrorT pgm_error_t]`*``*`                restrict error
	);

void *pgm_freeaddrinfo* (
	struct [OpenPgm5CReferencePgmAddrInfoT pgm_addrinfo_t]`*`   res
	);
</pre>

=== Purpose ===
Decompose a string network specification.

=== Remarks ===
The TIBCO Rendezvous network parameter provides a convenient compact representation of the complicated data structures needed to specify sending and receiving interfaces and multicast addresses.  This function provides conversion between the network string and the <tt>struct group_req</tt> parameters of <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt>.

The returned <tt>[OpenPgm5CReferencePgmAddrInfoT pgm_addrinfo_t]</tt> must be freed with <tt>pgm_freeaddrinfo()</tt>.

=== Parameters ===

<table border="1" cellpadding="5" cellspacing="0">
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
<tr>
<td><tt>network</tt></td>
<td>A TIBCO Rendezvous compatible network parameter string</td>
</tr><tr>
<td><tt>hints</tt></td>
<td>Transport info structure whose <tt>ai_family</tt> specify criteria that limit the set of addresses returned by <tt>pgm_getaddrinfo()</tt>.</td>
</tr><tr>
<td><tt>res</tt></td>
<td>return location for resolved transport info structure.</td>
</tr><tr>
<td><tt>error</tt></td>
<td>return location for error.</td>
</tr>
</table>


=== Return Value ===
On success, <tt>true</tt> is returned.  On failure, <tt>false</tt> is returned and if <tt>error</tt> is set it may be populated with details of the exception.

=== Example ===
Basic example using default hints.
{{{
 char* network = "eth0;226.0.0.1";
 struct pgm_addrinfo_t* res = NULL;
 pgm_error_t* err = NULL;
 
 if (!pgm_getaddrinfo (network, NULL, &res, &err)) {
   fprintf (stderr, "Parsing network parameter: %s\n", (err && err->message) ? err->message : "(null)");
   pgm_error_free (err);
   return EXIT_FAILURE;
 }
}}}

=== See Also ===
  * <tt>[OpenPgm5CReferencePgmErrorT pgm_error_t]</tt><br>
  * <tt>[OpenPgm5CReferencePgmAddrInfoT pgm_addrinfo_t]</tt><br>
  * <tt>[OpenPgm5CReferencePgmGetSockOpt pgm_setsockopt()]</tt><br>
  * [OpenPgm5CReferenceInterface Interface] in OpenPGM C Reference.<br>
  * [OpenPgm5CReferenceErrorHandling Error Handling] in OpenPGM C Reference.

